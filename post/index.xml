<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on c332030</title>
    <link>https://c332030.com/post/</link>
    <description>Recent content in Posts on c332030</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 13 Sep 2022 22:00:00 +0000</lastBuildDate><atom:link href="https://c332030.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL锁实践-幻读</title>
      <link>https://c332030.com/p/2022/09/mysql%E9%94%81%E5%AE%9E%E8%B7%B5-%E5%B9%BB%E8%AF%BB/</link>
      <pubDate>Tue, 13 Sep 2022 22:00:00 +0000</pubDate>
      
      <guid>https://c332030.com/p/2022/09/mysql%E9%94%81%E5%AE%9E%E8%B7%B5-%E5%B9%BB%E8%AF%BB/</guid>
      <description>发现问题 最近写的一个定时任务出现了主键冲突，数据插入失败了。我记得我有在插入前查询是否存在，但是仍然出现了这种情况。
 翻阅日志发现，查询回来的记录数量为 0，插入又失败了。
 我想到了几种情况：
  数据在其他事务里插入了，但还没提交，导致这个事务里查询不存在但插入失败，因为我们的事务级别是可重复读；
  主从架构，查询的从库，数据不是最新。
   思索过后，发现第二张情况不满足，因为我们的测试环境只有一个数据库，那就只有第一种情况了。
   使用行锁 所以，我把业务代码调整了下：
 之前
  查询记录
  不存在则插入记录
  使用查回来或者新建的对象
   现在
  使用 insert on duplicate key update 插入或者更新数据（当前事务锁定记录）
  查询记录
  使用查回来的对象
   成功解决问题。
 我知道会存在这种情况，但是之前这样写都没有发生过这种情况，也就放松了警惕。
   使用间隙锁 如果说，要求一定要先查询，判断不存在在插入，而且不能发生主键冲突，那又该如果处理呢？
 那只能在查询时加上锁了，可是记录不存在，那锁的是表吗？我猜可能是间隙锁，刚好趁这个机会，测试一下间隙锁。
 首先，我先建立这样一张表
 create table table_name ( id int auto_increment primary key, value int null );   插入测试数据</description>
    </item>
    
    <item>
      <title>解决升级微信开发者工具后无法保存Cookie</title>
      <link>https://c332030.com/p/2022/05/%E8%A7%A3%E5%86%B3%E5%8D%87%E7%BA%A7%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E5%90%8E%E6%97%A0%E6%B3%95%E4%BF%9D%E5%AD%98cookie/</link>
      <pubDate>Fri, 20 May 2022 22:00:00 +0000</pubDate>
      
      <guid>https://c332030.com/p/2022/05/%E8%A7%A3%E5%86%B3%E5%8D%87%E7%BA%A7%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E5%90%8E%E6%97%A0%E6%B3%95%E4%BF%9D%E5%AD%98cookie/</guid>
      <description>发现问题 在开发公司一个 H5 后台接口的时候，前端突然和我说接口抛了异常，但当我知道是哪个接口后，却陷入了疑惑，因为报错的是历史接口，都没动过。
 通过看日志才发现是 token 没有传，请求头里没有，浏览器 application Cookie 里也看不到，找到设置 Cookie 的地方，发现 Set-Cookie 响应头后面有个感叹号，不管是控制台还是点击感叹号、鼠标悬浮感叹号上，都没有任何提示信息。
 所有 Set-Cookie 后面都有感叹号，所以图片截的是 jsessionid 的
   经过查找资料发现，从 Chrome 51 起加个 SameSite 的属性，用于防御 跨站请求伪造（CSRF），这个值默认是 None，也就是允许所有第三方 Cookie，然而从 Chrome 80 开始，SameSite 的默认值变成了 Lax。
 微信授权需要 https，而本地没有 https 的条件（域名证书公司领导管理），虽然一级域名一样，但是还是无法保存 Cookie。
   解决问题 我们的页面是嵌入微信小程序的，不存在开放 H5 直接访问的可能，所以这里我可以将 SameSite 的值手动设置为 None。
 方案1 不使用 HttpServletResponse.addCookie 但当我动手时，又发现 Servlet API 4.0.1 中 Cookie 对象并不支持 SameSite 属性，于是我决定不使用 HttpServletResponse.addCookie，手动拼接响应报文头。
 /** * Web 工具类，判断是不是 https * @author c332030 */ public class WebUtils { public static final String HTTPS = &amp;#34;https&amp;#34;; private WebUtils() {} public static boolean isHttps(HttpServletRequest request) { // 考虑到 nginx 代理的情况，读取：X-Forwarded-Proto String scheme = request.</description>
    </item>
    
    <item>
      <title>maven&#43;svn 版本管理</title>
      <link>https://c332030.com/p/2021/05/maven-svn-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 11 May 2021 21:00:00 +0000</pubDate>
      
      <guid>https://c332030.com/p/2021/05/maven-svn-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</guid>
      <description>前言 公司项目的版本号要么是快照版本（以-SNAPSHOT），要么是发行版本却一直在一个分支上开发，这就会有几个问题：
  maven 默认不下载快照版本的依赖，导致私服上有依赖也下载不下来；
  使用发行版本时，却从来不变更版本号，导致依赖有更新却不会去私服上下载；
  一直在单个分支上开发就会导致代码有变更时，旧项目无法再取到未变更的依赖， 我们也没法保留之前上线过的版本的源代码，导致旧版本有需求时，不得不加在在最新的代码上， 部署也是部署最新的代码，很多不是此次上线的功能也部署上去了。
   除却版本定义和单分值的问题外，还有以下问题：
  项目中的版本号都是手动管理，在 dependencies 中添加模块依赖时，要么采用占位符 ${} 的方式， 要么直接把版本号写在这里，这就导致后面版本号的更新操作变得困难或无法自动化处理。
     方案 针对公司项目管理的这些问题，在征得领导的同意后，采取以下措施进行解决：
  对项目的分支进行标准化管理，重点是功能变更测试完成后需要打 tag（具体见后文）；
  对开发分支使用快照版本，为其他开发成员开启下载快照版本的功能；
  对项目中所有当前项目的模块依赖直接指定版本号（便于使用自动化工具），并且对其他项目会用到的模块在根目录的 pom.xml 中使用 dependencyManagement 管理，这样子模块中的模块依赖就不需要指定版本号；
  打 tag 之前，保证项目中依赖的其他项目的模块版本号都是发行类型（不以 -SNAPSHOT 结尾），保证依赖的代码不会变更；
  打完 tag 的项目是发行版本，不再接受代码变更，并且上传依赖到私服；
  新建一个 pom 类型的项目，名称以 -bom 结尾（参考 spring，不使用 dependencies 的原因是 bom 更方便输入）；</description>
    </item>
    
    <item>
      <title>adb停用自带应用</title>
      <link>https://c332030.com/p/2021/05/adb%E5%81%9C%E7%94%A8%E8%87%AA%E5%B8%A6%E5%BA%94%E7%94%A8/</link>
      <pubDate>Wed, 05 May 2021 11:00:00 +0000</pubDate>
      
      <guid>https://c332030.com/p/2021/05/adb%E5%81%9C%E7%94%A8%E8%87%AA%E5%B8%A6%E5%BA%94%E7%94%A8/</guid>
      <description>前言 新买的 真我GT 自带了一些应用，试过不是很好用，但是手机没有 root，在手机上卸载不了也停用不了，了解到可以用 adb 来停用，于是来试试。
   准备工作 了解 adb 命令 Google 到相关的命令如下：
 查询应用包名：adb shell pm list packages -s
 启用应用：adb shell pm enable 包名
 停用应用：adb shell pm disable-user 包名
 卸载应用：adb shell pm uninstall -k --user 0 包名
  打开 usb 调试 要执行 adb 命令，手机需要使用 usb 连接电脑，现在的手机开发者选项都是隐藏了的，可以看到设置-其他设置，SIM 应用下面是最近任务。
 进入设置-关于手机-版本信息-版本号点7下-输入密码打开开发者模式。
 现在设置-其他设置，SIM 应用下面是开发者选项了，点进去，打开 usb 调试。
    安装 adb Google 搜到 adb 下载地址，下载 windows 版本 adb</description>
    </item>
    
    <item>
      <title>java枚举成员方法</title>
      <link>https://c332030.com/p/2021/03/java%E6%9E%9A%E4%B8%BE%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 21 Mar 2021 18:48:00 +0000</pubDate>
      
      <guid>https://c332030.com/p/2021/03/java%E6%9E%9A%E4%B8%BE%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95/</guid>
      <description>前言 刚进公司的时候，看到同事定义的枚举类中定义了一个 code 保存枚举的名字，大概是这样：
 public enum TestEnum { TEST(&amp;#34;TEST&amp;#34;, &amp;#34;测试&amp;#34;) ; private final String code; private final String name; TestEnum(String code, String name) { this.code = code; this.name = name; } // get set ... public static TestEnum codeOf(String code) { // 通过 code 获取枚举 } }   首先看到的是 TEST 这个单词出现了两次，然后每个枚举都定义了 codeOf，code 和 name 方法都添加了 set 方法。 我本能上觉得，java 语言不会设计得这么傻，前两个问题应该已经有了成熟方案，于是去看枚举的父类 Enum，果然找到了。
   Enum 方法 我列出用的比较多的方法
  name()</description>
    </item>
    
    <item>
      <title>前端流程控制</title>
      <link>https://c332030.com/p/2021/03/%E5%89%8D%E7%AB%AF%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Wed, 17 Mar 2021 22:00:00 +0000</pubDate>
      
      <guid>https://c332030.com/p/2021/03/%E5%89%8D%E7%AB%AF%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>基本流程  初始化
  业态切换（可选）
  页面初始化（可选）
  组件显示
  下拉选项加载、设置
        查询流程
  压值
  取值
  值校验
  非空校验
  内容校验
     数据转换、包装
     网络通讯
  设置通讯方式（get/post，form/json）
  发起请求
  结果处理（成功失败校验、错误提示）
     数据处理
  数据转换、格式化
  数据展示</description>
    </item>
    
  </channel>
</rss>
